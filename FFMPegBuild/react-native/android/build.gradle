buildscript {
  repositories {
    google()
    mavenCentral()
     flatDir {
    dirs 'libs'
  }
  
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:8.1.0'
  }
}

apply plugin: 'com.android.library'

def safeExtGet(String prop, String fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

android {
  if (project.android.hasProperty("namespace")) {
    namespace 'com.arthenica.ffmpegkit.reactnative'
  }

  compileSdkVersion 35

  defaultConfig {
    minSdkVersion 24
    targetSdkVersion 35
    versionCode 602
    versionName "6.0.2"
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }
  lintOptions {
    disable 'GradleCompatible'
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
}

repositories {
  mavenCentral()
  google()
  

  flatDir {
    dirs 'libs'
  }
  

  def found = false
  def defaultDir = null
  def androidSourcesName = 'React Native sources'

  if (rootProject.ext.has('reactNativeAndroidRoot')) {
    defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
  } else {
    defaultDir = new File(
      projectDir,
      'node_modules/react-native/android'
    )
  }

  if (defaultDir.exists()) {
    maven {
      url defaultDir.toString()
      name androidSourcesName
    }

    logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
    found = true
  } else {
    def parentDir = rootProject.projectDir

    1.upto(5, {
      if (found) return true
      parentDir = parentDir.parentFile

      def androidSourcesDir = new File(
        parentDir,
        'node_modules/react-native'
      )

      def androidPrebuiltBinaryDir = new File(
        parentDir,
        'node_modules/react-native/android'
      )

      if (androidPrebuiltBinaryDir.exists()) {
        maven {
          url androidPrebuiltBinaryDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
        found = true
      } else if (androidSourcesDir.exists()) {
        maven {
          url androidSourcesDir.toString()
          name androidSourcesName
        }

        logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
        found = true
      }
    })
  }

  if (!found) {
    throw new GradleException(
      "${project.name}: unable to locate React Native android sources. " +
        "Ensure you have you installed React Native as a dependency in your project and try again."
    )
  }
}

dependencies {
  api 'com.facebook.react:react-native:+'
  
  // Use flatDir repository reference instead of direct file dependency
  // api(name: 'ffmpeg-kit-release', ext: 'aar')
    
  // Extract and use the AAR contents as a transitive dependency
  // compileOnly fileTree(dir: 'libs', include: ['*.aar'])
  // api fileTree(dir: 'libs', include: ['*.jar'])
  // implementation(name: 'ffmpeg-kit-release', ext: 'aar')

    // IMPORTANT: Use compileOnly for everything in libs
  compileOnly fileTree(dir: 'libs', include: ['*.aar', '*.jar'])
  
  // Or separately:
  // compileOnly(name: 'ffmpeg-kit-release', ext: 'aar')
  // compileOnly fileTree(dir: 'libs', include: ['*.jar'])
}